- Let and Const it is called as block scoped variable.
- var is a global scope and functional scope.
const: constant value.
const days = 7;
const PI = 3.14;

Example:
let a = 18;

if(true){
    let a = 10;
    console.log(a);
}

console.log(a);

Spread Operator:
- Syntax: ...
- Application: expanding array
- it is applicable of string or an array.

Example:
var arr = ["TNF01", "FSD", "Tamil"];
console.log(...arr);

- Combining the array:
var arr1 = [1,2,3,4,5];
var arr2 = [6,7,8,9,10];
// [1,2,3,4,5,6,7,8,9,10]

var res = [...arr1, ...arr2];
console.log(res);

Task: 
["Name", "email", "gender", "education"]
["skill", "years of experience", "location", "language"]

- Application: character array.
var arr = "Welcome";
var res = [...arr];
console.log(res);

Destructuring the Array:
- Destructuring is unpacking the array element into a bunch of variable.
let arr = ["john", "doe"];
let a = arr[0];
let b = arr[1]
let [s1, s2] = arr;
console.log(s1);
console.log(s2);

Destructuring the Object:
var obj = {
    firstName: "Thiru",
    city: "chennai",
    course: "fsd",
}
console.log(obj.city);

var {firstName, city, course} = obj;
console.log(firstName);


Question:
var a = 34;
var b = 35;
O/P: 
The sum of a and b is
69

\n - next line

Example:
var a = 34;
var b = 35;
console.log("The sum of a and b is", "\n", a+b);

Template literals:
- help us to make the concatenation inside the output.
- statement much effective
Example:
var a = 34;
var b = 35;
Backtick - on keyboard below ESC Button
console.log(`The sum of a and b is
${a+b}`);

Question:

function sum(){

}

sum(1,2,3,4) // 10

Rest Parameter:
function add(...a){
    // it is called as rest parameter
    // it is undefined
    // rest parameter is nothing but an array
    let sum = 0;
    for(var i=0; i<a.length; i++){
        sum=sum+a[i]
    }
    return sum;
}
console.log(add(2,3,5));
